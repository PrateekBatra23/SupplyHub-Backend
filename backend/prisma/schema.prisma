// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum OrderStatus {
  Processing
  InTransit
  Completed
  Cancelled
}

enum ShipmentStatus {
  Pending
  Dispatched
  Delivered
  Cancelled
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}

model Vendor {
  id        String    @id @default(uuid())
  name      String
  contact   String?
  email     String?   @unique
  rating    Int?      @default(0)
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id           String      @id @default(uuid())
  name         String
  description  String?
  price        Float
  sku          String?     @unique
  category     String?
  reorderPoint Int?        @default(0)
  vendorId     String?
  vendor       Vendor?     @relation(fields: [vendorId], references: [id])
  orderItems   OrderItem[]
  inventories  Inventory[]
  createdAt    DateTime    @default(now())
}

model Warehouse {
  id          String      @id @default(uuid())
  name        String
  location    String?
  capacity    Int?
  inventories Inventory[]
  shipments   Shipment[]
  createdAt   DateTime    @default(now())
}

model Inventory {
  id          String   @id @default(uuid())
  warehouseId String
  productId   String
  qtyOnHand   Int      @default(0)
  reservedQty Int      @default(0)
  lastUpdated DateTime @updatedAt

  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}

model Order {
  id               String      @id @default(uuid())
  customerName     String
  totalAmount      Float
  status           OrderStatus @default(Processing)
  orderDate        DateTime    @default(now())
  expectedDelivery DateTime?
  items            OrderItem[]
  shipments        Shipment[]
  cancelledAt   DateTime?
  cancelReason  String?
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Shipment {
  id               String    @id @default(uuid())
  orderId          String
  warehouseId      String?
  status           ShipmentStatus    @default(Pending)
  origin           String?
  destination      String?
  expectedDelivery DateTime?
  createdAt        DateTime  @default(now())
  order     Order      @relation(fields: [orderId], references: [id])
  warehouse Warehouse? @relation(fields: [warehouseId], references: [id])
  cancelledAt   DateTime?
  cancelReason  String?
}
